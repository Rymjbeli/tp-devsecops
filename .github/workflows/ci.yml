name: CI - Build, Test, Docker, SAST, SCA, DAST

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      docker-image: tp-devsecops:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest bandit

      - name: Run unit tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest --maxfail=1 --disable-warnings -q

#      - name: Build Docker image
#        run: docker build -t tp-devsecops:latest .

  snyk-sca:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth $SNYK_TOKEN

      - name: Run Snyk scan
        run: snyk test --file=requirements.txt --severity-threshold=high

  bandit-sast:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: pip install bandit jq

      - name: Run Bandit SAST scan
        run: |
          bandit -r app -lll -iii
          if bandit -r app -f json | jq '.results[] | select(.issue_severity=="HIGH")' | grep .; then
            echo "High severity Bandit issues found"; exit 1
          fi

  dast-zap:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build ephemeral Docker app
        run: |
          docker build -t tp-devsecops:latest .

      - name: Deploy ephemeral app
        run: |
          docker run -d --name ephemeral-app -p 8000:8000 tp-devsecops:latest
          # Wait for it to start
          sleep 15
          
      - name: Run ZAP scan
        run: |
          mkdir -p zap-reports
          docker run -v "${{ github.workspace }}/zap-reports:/zap/wrk:rw" --network="host" zaproxy/zap-stable \
            zap-full-scan.py \
            -t http://host.docker.internal:8000 \
            -r zap_report.html \
            -J zap_report.json \
            -z "-config api.disablekey=true"      

      - name: Check ZAP alerts
        run: |
          ALERTS=$(python - <<END
            import json
            with open("zap-reports/zap_report.json") as f:
                data = json.load(f)
            
            alerts = []
            for site in data.get("site", []):
                for a in site.get("alerts", []):
                    severity = a.get("riskdesc", "").split("(")[0].strip()
                    if severity in ("High", "Critical"):
                        alerts.append(a)
            print(len(alerts))
            END
            )
                      echo "High/Critical alerts: $ALERTS"
                      if [ "$ALERTS" -gt 0 ]; then
                        echo "Fail: High/Critical alerts found"; exit 1
                      else
                        echo "No High/Critical alerts â€” OK"
                      fi          

      - name: Tear down ephemeral app
        if: always()
        run: docker stop ephemeral-app && docker rm ephemeral-app

#  dast-zap:
#    runs-on: ubuntu-latest
#    needs: build-and-test
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Set up Docker
#        uses: docker/setup-buildx-action@v2
#
#      - name: Create Docker network
#        run: docker network create tp-net
#
#      - name: Build Docker image
#        run: docker build -t tp-devsecops:latest .
#
#      - name: Run app container
#        run: docker run -d --network tp-net --name tp-devsecops -p 8000:8000 tp-devsecops:latest
#
#      - name: Prepare report folder
#        run: |
#          mkdir -p zap-reports
#          chmod 777 zap-reports
#
#      - name: Run OWASP ZAP DAST scan
#        run: |
#          docker run --rm --network tp-net -v $(pwd)/zap-reports:/zap/wrk:rw \
#            zaproxy/zap-stable zap-baseline.py \
#            -t http://tp-devsecops:8000 \
#            -r zap_report.html -d -I  -a
#          echo "ZAP scan finished, checking results..."
#          # Fail only if there are actual FAILs in the report
#          if grep -q "FAIL-NEW" zap-reports/zap_report.html; then
#            echo "Critical vulnerabilities found by ZAP"; exit 1
#          else
#            echo "No critical vulnerabilities found, job will succeed."
#          fi
#
#      - name: Upload ZAP report
#        uses: actions/upload-artifact@v4
#        with:
#          name: zap-report
#          path: zap-reports/zap_report.html
#
#      - name: Stop and remove app container and network
#        run: |
#          docker stop tp-devsecops || true
#          docker rm tp-devsecops || true
#          docker network rm tp-net || true



